id: m17_vector_concat
label: vector_concat
category: '[m17]'

templates:
  imports: |-
    import m17
    import numpy
  make: m17.vector_concat(${type.t}, ${input_vlens}, ${verbose})

#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as \$keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
parameters:
- id: type
  label: Type
  dtype: enum
  default: complex
  options: [complex, float, int, short, byte]
  option_labels: [Complex, Float, Int, Short, Byte]
  option_attributes:
        t: [complex, float, int, short, numpy.byte]
  hide: part
- id: num_inputs
  label: Number of Inputs
  dtype: int
  default: '2'
- id: input_vlens
  label: Length of each vector input in order
  dtype: int_vector
  default: [1,1]
- id: verbose
  label: Verbose logging
  dtype: bool
  default: False

#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)
inputs:
- domain: stream
  dtype: ${ type.t }
  multiplicity: ${ num_inputs }
  vlen: ${ input_vlens }

outputs:
- domain: stream
  dtype:  ${ type.t }
  vlen:  ${ sum(input_vlens) }

#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
